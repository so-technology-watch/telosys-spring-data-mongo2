#checkId($entity)
#parse("include/init_var_global.vm")
#parse("include/init_var_entity.vm")
#parse("include/java_header.vm")
package ${target.javaPackageFromFolder($SRC)};

import java.util.List;

#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import javax.inject.Named;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import com.mongodb.WriteResult;
#if( $entity.hasAutoIncrementedKey() )
import org.demo.persistence.impl.springMongo.commons.SequenceDAO;
#end

import ${recordPackage}.${recordClass};
import ${ROOT_PKG}.persistence.${persistenceService};

/**
 * ${entity.name} persistence service - SpringMongo implementation 
 * 
 * @author Telosys
 *
 */
@Named("${persistenceService}")
public class $springMongoServiceClass implements $persistenceService {

	@Autowired
	private MongoTemplate mongoTemplate;
	private static final Class<${recordClass}> entityClass = ${recordClass}.class;

	public void setMongoTemplate(MongoTemplate mongoTemplate) {
		this.mongoTemplate = mongoTemplate;
	}

	//-------------------------------------------------------------------------------------
	// Util methods 
	//-------------------------------------------------------------------------------------
	/**
	 * Creates a new bean instance and set its primary key value(s)
	 * 
#foreach( $field in $keyFields )
	 * @param ${field.name}
#end
	 * @return the new instance
	 */
	private ${recordClass} newInstanceWithPrimaryKey($fn.argumentsListWithType($keyFields)) {
		${recordClass} record = new ${recordClass}();
#foreach( $field in $keyFields )
        record.${field.setter}(${field.name}); 
#end
		return record;
	}

	#if( !$entity.hasAutoIncrementedKey() )@SuppressWarnings("unused")#end

	private void setAutoIncrementedKey(${recordClass} record, long value) {
#if( $entity.hasAutoIncrementedKey() )
		record.${entity.autoincrementedKeyAttribute.setter}((${entity.autoincrementedKeyAttribute.type})value);
#else
		throw new IllegalStateException("Unexpected call to method 'setAutoIncrementedKey'");
#end
	}

	private Update updateQuery(${recordClass} record) {
		Update update = new Update();
#foreach($field in $nonkeyFields) 
		update.set("$field.name", record.${field.getter}());
#end
		return update;
	}

	protected Query queryForIdentifyBean(${recordClass} record) {
		Query query = new Query(Criteria.where("${keyFields.get(0).name}").is(record.${keyFields.get(0).getter}())#foreach($field in $keyFields)#if($field != ${keyFields.get(0)}) .and("$field.name").is(record.${field.getter}())#end
#end);
	    return query;
	}

#if( $entity.hasAutoIncrementedKey() )
	private void inserIncr(${recordClass} record) {
		SequenceDAO sequenceDAO = new SequenceDAO(mongoTemplate, "${recordClass}");
		do {
			try {
				setAutoIncrementedKey(record, sequenceDAO.nextVal("${recordClass}"));
			} catch (Exception e) {
				e.printStackTrace();
			}
		} while (exists(record) == true);
		mongoTemplate.insert(record);
	}
#end
	//-------------------------------------------------------------------------------------
	// Persistence interface implementations
	//-------------------------------------------------------------------------------------
	@Override
	public long countAll() {
		return mongoTemplate.count(new Query(), ${recordClass}.class);
	}
	
	@Override
	public ${recordClass} create(${recordClass} record) {
#if( $entity.hasAutoIncrementedKey() )
		inserIncr(record);
#else
		mongoTemplate.insert(record);
#end
		return record;
	}

	@Override
	public boolean delete(${recordClass} record) {
		Query query = queryForIdentifyBean(record);
		WriteResult result = mongoTemplate.remove(query, entityClass);
		return result.getN() > 0;
	}

	@Override
	public boolean deleteById($fn.argumentsListWithWrapperType($keyFields)) {
		${recordClass} record = newInstanceWithPrimaryKey($fn.argumentsList($keyFields));
		Query query = queryForIdentifyBean(record);
		WriteResult result = mongoTemplate.remove(query, entityClass);
		return result.getN() > 0;
	}

	@Override
	public boolean exists(${recordClass} record) {
		Query query = queryForIdentifyBean(record);
		return mongoTemplate.exists(query, entityClass);
	}

	@Override
	public boolean exists($fn.argumentsListWithWrapperType($keyFields)) {
		${recordClass} record = newInstanceWithPrimaryKey($fn.argumentsList($keyFields));
		Query query = queryForIdentifyBean(record);
		return mongoTemplate.exists(query, entityClass);
	}

	@Override
	public List<${recordClass}> findAll() {
		return mongoTemplate.findAll(entityClass);
	}

	@Override
	public ${recordClass} findById($fn.argumentsListWithWrapperType($keyFields)) {
        ${recordClass} record = newInstanceWithPrimaryKey($fn.argumentsList($keyFields));
		Query query = queryForIdentifyBean(record);
		return mongoTemplate.findOne(query, entityClass);
	}

	@Override
	public ${recordClass} save(${recordClass} record) {
		mongoTemplate.save(record);
		return record;
	}

	@Override
	public boolean update(${recordClass} record) {
		Query query = queryForIdentifyBean(record);
		Update update = updateQuery(record);
		WriteResult result = mongoTemplate.updateFirst(query, update, entityClass);
		return result.getN() > 0;
	}
}
